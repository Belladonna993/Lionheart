#ifndef UNIT_H  // this keeps the classes and structs from being defined more
#define UNIT_H  // than once, along with the #endif at the bottom

#include <string>
#include <cstdlib>

#define HORSESPEED 5 //how far the mounted warriors can travel in one action
#define ROWS 30   // board vertical dimension
#define COLS 30   // board horizontal dimension

using namespace std;

enum Direction {
    up, dn, toLeft, toRight, none
}; // all directions are specified using these

enum Rank {
    infantry, archer, knight, crown
}; // each unit has its own rank

struct Location {     // The Location struct is used in the situation report
    int row, col;     // to help the unit figure out where to go.
    Direction direction;  // This is the direction to go if you want to get to r,c.
};

enum ActionType {
    turn, moveFwd, attack, nothing
}; // These are all the thing a unit can do

struct Action {  // this struct helps define the details of eadh action
    ActionType action; // turn, fwd, attack, or nothing
    int maxDist;       // for mounted units, hwo far you want to move
    Direction dirToFace;           // for turn, which direction to turn to
    int archerRow, archerCol;         // archer target row and col
};

enum SpaceState {
    unit, empty, rock
}; // All things on the board are units, rocks, or empty space

struct Space { // this struct is used to completely define any one space on the board
    SpaceState state;  // a unit, a rock, or an empty space
    Rank rank;       // if it is a unit, this gives its rank
    string owner;      // if it is a unit, this gives its TLA
    Direction facing;         // it it is a unit, this gives its current direction
    int hp;          // if it is a unit, this gives its current strength
};

struct SitRep {  // this struct is given to the Recommendation function when an action is needed
    Space board[ROWS][COLS];    // a 2d array representing the board
    Location nearestEnemyCrown; // the location and direction of the nearest crown
    Location nearestEnemy;      // the location and direction of the nearest enemy
    Direction anyOpenSpace;           // the direction of an empty space (possibly
    // none) next to you
    int turnNumber;             // which turn is it?  [0 to MAXTURNS]
};


class Unit { // this class represents all units on the board.  your first task is to
    // write all the functions specified in this class

public:
    //contructors
    Unit();   // default constructor.  set r,c to 0, hp to INFANTRYHP, dir to up,
    // rank to infantry, dead to false, tla to "xxx"
    Unit(int ir, int ic, int ihp, Direction idir, Rank irank,
         bool idead, string itla);    //check for errors, exit if any found

    // accessors
    int getR();

    int getC();

    int getHp();

    Direction getDir();

    Rank getRank();

    bool getDead();

    string getTla();

    // manipulators
    void Turn(Direction newDir); // turn to the indicated direction
    void Move(int dist);   // move exactly this dist with no error checking
    int Attack();          // attack, return hits.  see offical rules for dice rolls
    void Suffer(int hits); // reduce hp by hits, adjust dead if needed
    virtual void Place(int minR, int maxR,
                       int minC, int maxC, SitRep sitrep); // put unit on board, inside the bounding
    // box define by min r,c and max r,c.
    // don't put two units in the same place
    // use the sitrep to figure out what is
    // there.
    virtual Action Recommendation(SitRep sitrep); // tell someone what you want to do.
    // return an action, as described above.
    // for the first phase, this is given to you.

protected:
    int row;       // row number
    int col;       // col number
    int hp;      // hit points
    Direction facing;     // current direction
    Rank rank;   // crown, knight, archer, or infantry;
    bool dead;   // I'm feeling much better; think I'll go for a walk
    string tla;  // default is "xxx"

};



// see the official rules for lionheart (pdf on canvas) for how to play the game

/* the basics for the implementation of this class *

r should never be less than 0 or greater than ROWS-1.

c should never be less than 0 or greater than COLS-1.

hp should never be less than 0.

dir should always be up, dn, lt, or rt.

rank should always be crown, knight, archer, or infantry.

dead is true if and only if hp is 0.

The tla can be any three character string.;

void Move(int dist): Move the unit dist steps in the current dir. 
No error checking is needed, because the game won't let you move
through another unit, on top of another unit, or off the board.

int Attack(): Return the number of hits generated by the unit
in an attack. Roll one six-sided die per hp.  For archers, any
time you roll a 1 or a 2, generate one hit.  For all other units,
any time you roll a 2, 3, or 4, generate one hit.  Return the
total number of hits.

void Suffer(int hits): For infantry and archers, reduce the number
of hp by hits.  For knights and crowns, reduce hp by hits/2.  if
hp becomes 0 or less, set it back to zero and set dead to true.

void Place(int minR,int maxR,int minC,int maxC, SitRep sitrep): set
r to a value greater than or equal to minR and less than or equal
to maxR. set c to a value greater than or equal to minC and less
than or equal to maxC.  [r,c] must be unique for all units that
share the same tla (i.e., each unit must have its own space). Use
the information in the sitrep to help you decide what to do here.

Action Recommendation(SitRep sitrep): return an Action to the game
that is your units recommendation for what it should do next.  This
function should not change any of the private data elements of the
object.  Use the information in the sitrep to help you decide what
to do here.figure this out.

SitRep:  This is a struct that contains a 2D map of Spaces.  Each
Space is a struct that provides information about what is in the
space.  It has a state, which is either a space, a rock, or a unit.
If the space is a unit, the other parts of the Space (rank, hp, dir,
and tla) are set to the correct information for that unit.

Action:  This stuct is returned by the Recommendation function and
describes what the unit "wants" to do.  It contains an ActionType
(turn, fwd, attack, or nothing).  If the action is to move, then
maxDist indicates how far the unit wants to move, subject of course
to the movement rules in the game.  If the action is to turn, then
dir is set to the desired direction.  If the action is to attack and
the unit is an archer, then ar and ac are set to the location the
archer wishes to attack, subject to the rules of the game.
*/
#endif // end of the #ifndef at the top
